# Iridium's assestfile is rather complex. It's probably one of
# the more complex pipelines you'll encounter. It's documented
# so you can learn from it. It's broken up to many different pipeline.
# Each pipeline is focused solely on it's area. There are 3 pipelines:
#
# 1. Javascript
# 2. Styleshseets
# 3. Asssets
#
# Each pipeline outputs files to the same directory. That directory
# is used for the next step in the pipeline. There are 3 phases
# to asset compilation.
#
# 1. Generation (JS/CSS/Assets)
# 2. Optimization
# 3. Output
#
# You can visualize the pipeline like this
#
#
#    \ JS /   \ CSS /    \ Assets /
#     \  /     \   /      \      /
#      |---------|------------|
#                |
#   ========== Step 1 ===========
#                |
#                |
#         + ------------ +
#         | Unoptimized  |
#         + ------------ +
#                |
#   ========== Step 2 ===========
#                |
#               \|/
#         + ------------ +
#         | Optimization |
#         + ------------ +
#                |
#   ========== Step 3 ===========
#                |
#               \|/
#         + ------------ +
#         |    Output    |
#         + ------------ +
#
# Each pipeline only concerns itself with the inputs from the previous 
# step. This keeps each stage isolated. It also makes it easy to inject
# new steps before others as well as expand them.
#
# The individual pipeline steps are documented as well so you can
# understand them.

# == The JavaScript pipeline
# 1. Compile all the vendor code
output app.build_path.join("javascript")
input app.vendor_path do
  # Use the specified vendor order to create a vendor.js file
  match "javascripts/*.js" do
    ordered_files = app.config.dependencies.collect { |f| "javascripts/#{f}.js" }
    concat ordered_files, "vendor.js"
  end
end

# 2. Compile environment specific code
input app.app_path.join("config") do
  match "**/*.coffee" do
    coffee_script
  end

  # Put environment specific files in the pipeline
  match "#{Iridium.env}.js" do
    iife
    concat "env.js"
  end
end

# 3. Compile initialization code
input app.app_path.join("config", "initializers") do
  match "**/*.coffee" do
    coffee_script
  end

  match "**/*.js" do
    iife
    concat "init.js"
  end
end

# 4. Compile localiation code
input app.app_path.join("locales") do
  # Compile all the translations into a single dictionary
  match "**.yml" do
    i18n "i18n.js"
  end
end

# 5. Compile application code
input app.app_path.join("javascripts") do
  match "**/*.coffee" do
    coffee_script
  end

  # Compile all Javascript files into Minispade modules.
  # Files in vendor/javascripts become modules
  # based on their file name. Files in javascripts
  # becomes modules inside your application namespace.
  #
  # Examples:
  # javascripts/boot.js -> require('app_name/boot');
  # javascripts/views/main.js -> require('app_name/views/main');
  match "**/*.js" do
    minispade :rewrite_requires => true, 
      :string => (app.config.minispade.module_format == :string),
      :module_id_generator => proc { |input|
        "#{app.class.to_s.demodulize.underscore}/#{input.path.gsub(/\.js$/, '')}"
      }

    concat "lib.js"
  end
end

# 6. Compile handlebars templates
input app.app_path.join("templates") do
  match "**/*.{handlebars,hbs}" do
    handlebars :target => (app.config.handlebars.target || "Handlebars.TEMPLATES"),
      :wrapper_proc => (app.config.handlebars.compiler || proc { |source| "Handlebars.compile(#{source});" }),
      :key_name_proc => proc { |input|
      input.path.sub(File.extname(input.path), '')
    }

    concat "templates.js"
  end
end

# 7. Concatentate all the javascripts from the previous steps
#    in the proper order. build_path/javascript now contains
#    the unoptimized application.js
#
output app.build_path.join("preoptimization")
input app.build_path.join("javascript") do
  match "*.js" do
    concat ["vendor.js", "env.js", "init.js", "i18n.js", "lib.js", "templates.js"] , "application.js"
  end
end

# == Begin CSS Pipeline
# 1. Prepare the vendor css
output app.build_path.join("css")
input app.vendor_path do
  # Use the specified vendor order to create a vendor.js file
  match "stylesheets/*.css" do
    concat "vendor.css"
  end
end

# 2. Prepare the application css
input app.app_path.join("stylesheets") do
  # Skip SASS partials
  skip "**/_*.s{a,c}ss"

  # Now compile all the SCSS or SASS code
  match "**/*.s{c,a}ss" do
    sass
  end

  match "**/*.css" do
    concat "lib.css"
  end
end

# 3. Concatenate the vendor and application css.
#    Now build_path/css contains the final unoptimized application.css
output app.build_path.join("preoptimization")
input app.build_path.join("css") do
  match "*.css" do
    concat ["vendor.css", "lib.css"], "application.css"
  end
end

# == Now process the remaining assets
# 1. Copy over all the assets
output app.build_path.join("preoptimization")
input app.app_path do
  # Skip sprites since compass processes those
  skip "assets/images/sprites/**/*"

  # compile all erb templates. You can access "app" 
  # inside your templates like this: <% app.config %>
  match "**/*.erb" do
    erb binding
  end

  # All assets are moved into build_path/assets
  match "assets/**/*" do
    copy { |path| path.sub("assets/", "") }
  end

  match "index.html" do
    copy
  end
end

# now build_path/site contains all the files that need to be optimzed
# or undergo a conditional build step
output app.build_path.join("optimized")
input app.build_path.join("preoptimization") do
  if app.config.pipeline.minify
    match "**/*.js" do
      uglify { |path| path }
    end

    match "**/*.css" do
      yui_css { |path| path }
    end
  end

  if app.config.pipeline.manifest
    match "**/*" do
      manifest { |asset| asset }
    end
  end

  if app.config.pipeline.gzip
    match "**/*.*" do
      copy { |name| [name, "#{name}.gz"] }
    end

    match "**/*.gz" do
      gzip { |path| path }
    end
  end

  # Everything else is simply copied over
  match "**/*" do
    copy
  end
end

# Finally! The final step in the pipeline. build_path/site contains all
# the files for the compiled version. We can simply copy them over
# into the real directory

output app.site_path
input app.build_path.join("optimized") do
  match "**/*" do
    copy
  end
end
