output app.build_path.join("vendor")

input app.vendor_path do
  # Use the specified vendor order to create a vendor.js file
  match "javascripts/*.js" do
    ordered_files = app.config.dependencies.collect { |f| "javascripts/#{f}.js" }
    concat ordered_files, "build/vendor.js"
  end

  match "stylesheets/*.css" do
    concat "build/vendor.css"
  end
end

output app.site_path

input [app.app_path.to_s, app.build_path.join("vendor")] do

  # Skip sprites since compass processes those
  skip "assets/images/sprites/**/*"

  # Skip SASS partials
  skip "stylesheets/**/_*.s{a,c}ss"

  # compile all erb templates. You can access "app" 
  # inside your templates like this: <% app.config %>
  match "**/*.erb" do
    erb binding
  end

  match "**/*.coffee" do
    coffee_script
  end

  # Put environment specific files in the pipeline
  match "config/#{Iridium.env}.js" do
    iife
    concat "build/env.js"
  end

  # Compile all the translations into a single dictionary
  match "locales/**/*.yml" do
    i18n "config/initializers/i18n_dictionaries.js"
  end

  # Compile all initializers into a single init.js to be concatentated
  # later
  match "config/initializers/**/*.js" do
    iife
    concat "build/init.js"
  end

  # Compile all Javascript files into Minispade modules.
  # Files in vendor/javascripts become modules
  # based on their file name. Files in javascripts
  # becomes modules inside your application namespace.
  #
  # Examples:
  # javascripts/boot.js -> require('app_name/boot');
  # javascripts/views/main.js -> require('app_name/views/main');
  match "javascripts/**/*.js" do
    minispade :rewrite_requires => true, 
      :string => (app.config.minispade.module_format == :string),
      :module_id_generator => proc { |input|
        input.path.gsub("javascripts/", "#{app.class.to_s.demodulize.underscore}/").gsub(/\.js$/, '')
      }

    concat "build/lib.js"
  end

  # Now prepare the handlebars templates by transforming them
  match "templates/**/*.{handlebars,hbs}" do
    handlebars :target => (app.config.handlebars.target || "Handlebars.TEMPLATES"),
      :wrapper_proc => (app.config.handlebars.compiler || proc { |source| "Handlebars.compile(#{source});" }),
      :key_name_proc => proc { |input|
      input.path.sub("templates/", '').sub(File.extname(input.path), '')
    }

    concat "build/templates.js"
  end

  # minify and contact lib.js and vendor.js into a single
  # application.js
  match "build/*.js" do
    concat ["build/vendor.js", "build/env.js", "build/init.js", "build/lib.js", "build/templates.js"] , "build/application.js"

    if app.config.pipeline.minify
      uglify { |path| path }
    end
  end

  # compile all SCSS files into equivalent css file.
  # SCSS partials are not included in compiled output.
  match "stylesheets/**/*.s{c,a}ss" do
    sass
  end

  match "stylesheets/**/*.css" do
    concat "build/lib.css"
  end

  # select all stylesheets in the project
  match "build/*.css" do
    concat ["build/vendor.css", "build/lib.css"], "build/application.css"

    if app.config.pipeline.minify
      yui_css { |path| path }
    end
  end

  # copy the index html
  match "index.html" do
    copy do |input|
      input.sub "", "build/"
    end
  end

  # All images are moved int
  match "assets/**/*" do
    copy { |path| path.sub("assets/", "build/") }
  end

  if app.config.pipeline.manifest
    match "build/**/*" do
      manifest { |asset| asset.gsub("build/", "") }
    end
  end

  if app.config.pipeline.gzip
    match "build/**/*.*" do
      copy { |name| [name, "#{name}.gz"] }
    end

    match "build/**/*.gz" do
      gzip { |input| input }
    end
  end

  match "build/**/*.*" do
    copy { |path| path.sub("build/", "") } 
  end
end
